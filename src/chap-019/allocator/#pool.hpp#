#ifndef POOL_HPP
#define POOL_HPP

//#define DEBUG 1
#include <numeric>
#include <algorithm>

//#include <pair>
//TODO: Implement memory leaks detection
class Pool
{
public:
  const static int HASH_EXCEEDED_LIMITS = -1;
  const static size_t BUCKETS_SIZE = 21;
  
  typedef struct BucketStat
  {
    BucketStat();
    
    size_t size;
    size_t allocated;
    size_t used;
    size_t free;
	
    float fill_factor;
	
    /*
    size_t avg_real_size;
    float avg_mem_usage_efficiency;
		
    unsigned int requests;
    unsigned int missed;
    float missed_factor;
    */
  } BucketStat;
  
  
  typedef struct PoolStat
  {
    PoolStat();
    
    std::vector<BucketStat> buckets;
	
    size_t buckets_count;	
    //size_t real;
    size_t allocated;
    size_t used;
    size_t free;
    //float usage_efficiency;

    operator std::string();

  } PoolStat;

private:
  const static ptrdiff_t LINK_OFFSET = 1;
  struct ILink
  {
    ILink *next;
    ILink *previous;
  };

  ILink* _buckets[BUCKETS_SIZE];
  ILink* _used_buckets[BUCKETS_SIZE];

  BucketStat get_bucket_stat(int bucket_index) const;
  
protected:
  size_t get_bucket_size(size_t item_size) const;
  int get_hash(size_t size) const;
  int get_bucket_index(size_t required_size) const;
  size_t get_bucket_size_by_index(int bucket_index) const;

public:
  Pool();
  ~Pool();
  
  void* allocate(size_t size);
  void deallocate(void* ptr, size_t size);
  PoolStat get_stat() const;
};

Pool::Pool()
{
#if DEBUG
  std::cout << "Pool::Pool::initialize_buckets" << std::endl;
#endif
  
  for(int idx = 0; idx < BUCKETS_SIZE; ++idx)
  {
    _buckets[idx] = nullptr;
    _used_buckets[idx] = nullptr;
  }
}

Pool::~Pool()
{
  for(int idx = 0; idx < BUCKETS_SIZE; ++idx)
  {
    size_t bucket_size = get_bucket_size_by_index(idx);
    
    ILink *head = _buckets[idx];
    while(head != nullptr)
    {
      ILink *current = head;
      head = current->next;

      char *item = static_cast<char *>(static_cast<void *>(current));
      delete[] item;
    }
     
    _buckets[idx] = nullptr;
  }
}


size_t Pool::get_bucket_size(size_t item_size) const
{
  //size_t actual_size = std::max(item_size, sizeof(ILink));
  size_t actual_size = item_size + sizeof(ILink);
  //  std::cout << actual_size << std::endl;
  
  int result = 1;
  
  while(result < actual_size)
    result <<= 1;

  return result;
}

int Pool::get_hash(size_t size) const
{
  int result = -1;
  
  while(size)
  {
    size >>= 1;
    result++;
  }

  return result;
}

int Pool::get_bucket_index(size_t required_size) const
{
  // Calculate mem amount (req + size of link)
  //  size_t total_item_size = required_size + sizeof(ILink);
  // Calculate nearest to 2^n amount
  size_t bucket_size = get_bucket_size(required_size);
  int bucket_index = get_hash(bucket_size);

  if(bucket_index < 0 || bucket_index >= BUCKETS_SIZE)
    throw std::out_of_range("Can not find appropriate bucket. Size is out of range.");

  return bucket_index;
}

size_t Pool::get_bucket_size_by_index(int bucket_index) const
{
  int result = 1;
  
  while(bucket_index--)
  {
    result <<= 1;
  }

  return result;
}

void* Pool::allocate(size_t size)
{
  int bucket_index = get_bucket_index(size);
  ILink *bucket_head = _buckets[bucket_index];
  ILink *used_bucket_head = _used_buckets[bucket_index];
  void  *result;

  // Remove from unused bucket or create new
  // Unsused bucket head exists (can reuse it)
  if(bucket_head != nullptr)
  {
    _buckets[bucket_index] = bucket_head->next;
    result = bucket_head + LINK_OFFSET;
   
  }
  else
  {
    size_t bucket_size = get_bucket_size(size);
    char *item = new char[bucket_size];
    bucket_head = static_cast<ILink *>(static_cast<void *>(item));
    //result = static_cast<void *>(item) + LINK_OFFSET;
    result = static_cast<void *>(bucket_head + LINK_OFFSET);
  }
  
  // Clean up prev/next
  bucket_head->previous = nullptr;
  bucket_head->next = nullptr;

  
  // Add to used bucket
  // Used bucked head exists, so we need to link it to the current link
  if(used_bucket_head != nullptr)
  {
    used_bucket_head->previous = bucket_head;
    bucket_head->next = used_bucket_head;
    bucket_head->previous = nullptr;
  }
  else
  {
    bucket_head->next = nullptr;
    bucket_head->previous = nullptr;
  }
  // Set used bucket head to the current link
  _used_buckets[bucket_index] = bucket_head;
  
  return result;
}

void Pool::deallocate(void* ptr, size_t size)
{
  //Shift two pointers(prev,next) bacl
  ILink *link = static_cast<ILink *>(ptr) - LINK_OFFSET;
  int bucket_index = get_bucket_index(size);

  //#if DEBUG
  // std::cout << "Pool::deallocate::[ptr=" << ptr << ", link_ptr=" << link << ", link->previous=" << link->previous << ", link->next=" << link->next << std::endl;
  //#endif
  
  // Remove from used bucket
  if(_used_buckets[bucket_index] == link)
  {
    _used_buckets[bucket_index] = link->next;
    
    if(_used_buckets[bucket_index] != nullptr)
      _used_buckets[bucket_index]->previous = nullptr;
  }
  
  if(link->previous != nullptr)
  {
    link->previous->next = link->next;
  }

  if(link->next != nullptr)
  {
    link->next->previous = link->previous;
  }
  
  link->previous = nullptr;
  link->next = nullptr;
  
  // Back to unused bucket
  if(_buckets[bucket_index] == nullptr)
  {
    link->next = nullptr;
    _buckets[bucket_index] = link;
  }
  else
  {
    link->next = _buckets[bucket_index];
    _buckets[bucket_index] = link;
  }

#if DEBUG
  if(_used_buckets[bucket_index] == nullptr)
  {
    ILink * temp = _buckets[bucket_index];
    while(temp != nullptr)
    {
      std::cout << temp << std::endl;
      temp = temp->next;
    }
  }
#endif
}

Pool::PoolStat Pool::get_stat() const
{
  PoolStat result;

  for(size_t idx = 0; idx < BUCKETS_SIZE; ++idx)
  {
    BucketStat bucket_stat = get_bucket_stat(idx);
    result.buckets.push_back(bucket_stat);
  }

  result.buckets_count = result.buckets.size();
  result.used += std::accumulate(result.buckets.begin(), result.buckets.end(), 0, [](int x, BucketStat const &b) { return x + b.used; });
  result.free += std::accumulate(result.buckets.begin(), result.buckets.end(), 0, [](int x, BucketStat const &b) { return x + b.free; });
  result.allocated += std::accumulate(result.buckets.begin(), result.buckets.end(), 0, [](int x, BucketStat const &b) { return x + b.allocated; });  
  

  return result;
}

Pool::BucketStat Pool::get_bucket_stat(int bucket_index) const
{
  BucketStat result;
  result.size = get_bucket_size_by_index(bucket_index);

  ILink *used_link = _used_buckets[bucket_index];
  while(used_link != nullptr)
  {
    result.used++;
    used_link = used_link->next;
  }

  ILink *unused_link = _buckets[bucket_index];
  while(unused_link != nullptr)
  {
    result.free++;
    unused_link = unused_link->next;
  }

  //std::cout << result.size << " :: " << result.used << " :: " << result.free << std::endl;
  result.allocated = result.used + result.free;
  
  result.fill_factor = result.allocated ? (float(result.used) / float(result.allocated)) : 0;

  return result;
}

Pool::BucketStat::BucketStat() : size(0),  allocated(0), used(0), free(0), fill_factor(0.0)
{
}

Pool::PoolStat::PoolStat() : buckets_count(0), allocated(0), used(0), free(0)
{
}

Pool::PoolStat::operator std::string()
{
  std::string result = "Pool usage statistics:";
  result.append("\n\tbuckets_count=" + std::to_string(buckets_count));
  result.append("\n\tallocated=" + std::to_string(allocated));
  result.append("\n\tused=" + std::to_string(used));
  result.append("\n\tfree=" + std::to_string(free));

  result.append("\n\n\tPer bucket usage statistics:");
  result.append("\n\t\tSize\t\tAllocated\tUsed\t\tFree\t\tFill factor");
  std::for_each(buckets.begin(), buckets.end(), [&result](BucketStat const &bs)
  {
    result.append("\n\t\t" + std::to_string(bs.size));
    result.append("\t\t" + std::to_string(bs.allocated));
    result.append("\t\t" + std::to_string(bs.used));
    result.append("\t\t" + std::to_string(bs.free));
    result.append("\t\t" + std::to_string(bs.fill_factor));
  });

  return result;
}



#endif
